# Julia script to solve the 1D shallow water equations as a DAE problem
using NonlinearSolve, LinearAlgebra, Parameters, Plots, Sundials, Statistics

# This code is a template for solving the 1D shallow water equations (SWE) as a DAE problem.
# The setup is as follows:
# 1. Define parameters for the simulation, including gravity, number of grid points,
#   spatial domain, and bottom topography.
# 2. Set up initial conditions for water height and momentum.
# 3. Define the DAE residual function that describes the SWE.
# 4. Implement a time loop to solve the DAE problem using Sundials' IDA solver.
# 5. Plot the results.
# 6. Function calls to start the simulation.


# --- 1. Parameter setup ---
function make_parameters()
    """
    Function to set up parameters for the 1D SWE simulation
    """
    D = 10.0 #base depth
    nx = 200 #number of spatial grid points
    x_domain = (0.0, 5.0) #spatial domain
    x = range(x_domain[1], x_domain[2], length=nx) #spatial grid points
    dx = step(x) #step size
    z_b_1 = -D  #flat bottom
    z_b_2 = -D .+ 0.4 .* sin.(2π .* (x .- minimum(x)) ./ (maximum(x) - minimum(x)) .* 5) #topography
    h_0 = 0.1 .* exp.(-100 .* ((x .- mean(x)) .^ 2)) .- z_b_2  #initial water height
    h_0 = max.(h_0, 1e-6) #clip negative values (if any)
    q_0 = zeros(nx)#initial discharge (array)
    t_0 = 0.0
    t_stop = 1.0
    g = 9.81 #gravity
    c_f = 0.01 #friction coefficient

    return Dict(
        :nx => nx,
        :x => x,
        :dx => dx,
        :z_b_2 => z_b_2,
        :h_0 => h_0,
        :q_0 => q_0,
        :t_0 => t_0,
        :t_stop => t_stop,
        :g => g,
        :c_f => c_f,
    )
end

# --- 2. Initial condition ---
function initial_conditions(params)
    """
    Function to set up initial conditions for the SWE simulation
    """
    h = copy(params[:h_0])
    q = copy(params[:q_0])

    return h, q
end

#defines the boundary conditions (dirichlet and neumann)
function apply_boundary_conditions!(du, u, p, t, h_left, h_right)
    """
    Function to apply boundary conditions to the SWE equations
    (need to choose between Dirichelt and Neumann BCs)
    """

    du[1] = 0.0  
    du[end] = 0.0  

    du[1] = u[1] - h_left  
    du[end] = u[end] - h_right  

    return nothing
end

# --- 3. DAE residual function ---
# Note: the "!" at the end of the function name indicates that the function modifies 
# its arguments (convention in Julia)
function swe_dae_residual!(residual, du, u, p, t)
    """
    This function updates the residuals for the SWE DAE problem
    """
    nx = p[:nx]
    dx = p[:dx]
    g = p[:g]
    z_b = p[:z_b_2]
    c_f = p[:c_f]

    #unpack u and du
    h = u[1:nx]
    q = u[nx+1:2nx]
    dhdt = du[1:nx]
    dqdt = du[nx+1:2nx]

    #compute fluxes
    f_h = q
    f_q = q .^ 2 ./ max.(h, 1e-6) .+ 0.5 * g * h .^ 2

    #spatial discretization
    ∂f_h_∂x = (circshift(f_h, -1) .- circshift(f_h, 1)) ./ (2dx)
    ∂f_q_∂x = (circshift(f_q, -1) .- circshift(f_q, 1)) ./ (2dx)

    #topography term: surface elevation gradient
    ζ = h .+ z_b
    ∂ζ_∂x = (circshift(ζ, -1) .- circshift(ζ, 1)) ./ (2dx)

    #friction term
    h_safe = max.(h, 1e-6)  # Avoid division by zero
    friction = c_f .* q .* abs.(q) ./ h_safe .^ 2

    #residuals
    residual[1:nx] .= dhdt .+ ∂f_h_∂x
    residual[nx+1:2nx] .= dqdt .+ ∂f_q_∂x .+ g .* h_safe .* ∂ζ_∂x .+ friction
    return nothing
end

# --- 4. Time integration ---
function timeloop(params)
    #unpack parameters 
    nx = params[:nx]
    x = params[:x]
    dx = params[:dx]
    z_b = params[:z_b_2]
    g = params[:g]
    c_f = params[:c_f]
    tstart = params[:t_0]
    tstop = params[:t_stop]
    N = length(x)

    #set up initial conditions
    h0, q0 = initial_conditions(params)
    u0 = vcat(h0, q0)
    du0 = zeros(2N)  

    tspan = (tstart, tstop) 

    # Specify differentiable variables as (true) -> all variables
    differential_vars = trues(2N)

    dae_prob = DAEProblem(
        swe_dae_residual!, du0, u0, tspan, params;
        differential_vars=differential_vars
    )
    sol = solve(dae_prob, IDA(), reltol=1e-8, abstol=1e-8) #solves the DAE problem using default settings

    # --- 5. a Live Plots ---

    return sol # return solution object
end


function animate_solution(solution, params)
    x = params[:x]
    z_b = params[:z_b_2]
    n = length(x)

    h_mat = hcat([u[1:n] for u in solution.u]...)
    t_vals = solution.t

    #gets full range across both h and z_b for proper y-axis scaling
    h_min = minimum(h_mat .+ z_b)  # total surface elevation (ζ = h + z_b)
    h_max = maximum(h_mat .+ z_b)
    buffer = 0.1 * (h_max - h_min)
    ylims = (h_min - buffer, h_max + buffer)

    max_frames = min(100, size(h_mat, 2))
    indices = round.(Int, range(1, stop=size(h_mat, 2), length=max_frames))

    anim = @animate for (j, i) in enumerate(indices)
        println("Frame $j of $(length(indices)) - Bottom + Surface")
        surface = h_mat[:, i] .+ z_b  # total elevation
        plot(x, surface, label="Water surface", lw=2, ylim=ylims)
        plot!(x, z_b, label="Bottom", linestyle=:dash, color=:black)
        title!("t = $(round(t_vals[i], digits=2)) s")
    end

    gif(anim, "bottom_and_surface.gif", fps=5)
end

function plot_mass_conservation_gif(solution, params)
    dx = params[:dx]
    n = params[:nx]
    t_vals = solution.t

    mass = [sum(u[1:n]) * dx for u in solution.u]
    m0 = mass[1]

    #set a small buffer (e.g. ±0.5%) around the initial mass
    buffer = 0.005 * m0
    ylims = (m0 - buffer, m0 + buffer)

    max_frames = min(100, length(t_vals))
    indices = round.(Int, range(1, stop=length(t_vals), length=max_frames))

    anim = @animate for (j, i) in enumerate(indices)
        println("Frame $j of $(length(indices)) - Mass plot")
        plot(t_vals[1:i], mass[1:i],
            label="Total Mass", lw=2, c=:blue,
            xlabel="Time (s)", ylabel="Mass", legend=false, ylim=ylims)
        scatter!([t_vals[i]], [mass[i]], label="", c=:red)
        title!("t = $(round(t_vals[i], digits=2)) s")
    end

    gif(anim, "mass_conservation.gif", fps=5)
end

function plot_velocity(solution, params)
    x = params[:x]
    n = length(x)
    t_vals = solution.t

    velocity_mat = hcat([
        solution.u[i][n+1:2n] ./ max.(solution.u[i][1:n], 1e-6)
        for i in 1:length(t_vals)
    ]...)

    #compute dynamic y-axis limits
    vmin = minimum(velocity_mat)
    vmax = maximum(velocity_mat)
    buffer = 0.05 * (vmax - vmin)
    ylims = (vmin - buffer, vmax + buffer)
    
    indices = round.(Int, range(1, stop=length(t_vals), length=100))
    anim = @animate for i in indices
        plot(x, velocity_mat[:, i],
            label="Velocity", lw=2, ylim=ylims,
            xlabel="x", ylabel="Velocity",
            title="Velocity at t = $(round(t_vals[i], digits=2)) s")
    end

    gif(anim, "velocity_evolution.gif", fps=3)
end


# --- 6. Main script ---

params = make_parameters()
solution = timeloop(params)
animate_solution(solution, params)
plot_mass_conservation_gif(solution, params)
plot_velocity(solution, params)
